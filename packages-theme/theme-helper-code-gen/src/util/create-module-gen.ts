import {
  INDENT
} from '../const';

class ModuleGen {
  private by: string;
  private snippets: string[] = [];
  
  constructor(by: string) {
    this.by = by;
  }
  
  push(...snippets: string[]): void;
  push(indent: number, ...snippets: string[]): void;
  push(arg0: number | string, ...args: string[]): void {
    let indent = 0;
    let snippets: string[];
    
    if (typeof arg0 === 'number') {
      indent = arg0;
      snippets = args;
    } else {
      snippets = [arg0, ...args];
    }
    
    if (indent <= 0) {
      this.snippets.push(...snippets);
    } else {
      const indentString = INDENT.repeat(indent);
      
      snippets.forEach(snippet => {
        this.snippets.push(...snippet.split('\n').map(v => `${indentString}${v}`));
      });
    }
  }
  
  generate(): string {
    const {
      by,
      snippets
    } = this;
    const content = snippets.join('\n');
    
    return by ? `/* ===================== *
 * 🚨 No Manual Edit 🚨
 * Generated by ${by}
 * ===================== */
${content}` : content;
  }
}

/**
 * 生成模块代码
 */
export default function createModuleGen(by: string): ModuleGen {
  return new ModuleGen(by);
}